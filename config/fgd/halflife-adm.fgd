
//
// Half-Life ADM game definition file
// Based on Half-Life Unified SDK's FGD, which is
// based on Half-Life Opposing Force FGD 1.51 (06/08/2000)
//

//
// worldspawn
//

@SolidClass = worldspawn : "World entity"
[
    message(string) : "Map description / title"
    skyname(string) : "Skybox"
    sounds(integer) : "CD track to play" : 1
    light(integer) : "Default light level"
    WaveHeight(string) : "Default wave height"
    MaxRange(string) : "Max viewable distance" : "4096"
    chaptertitle(string) : "Chapter title message"
    startdark(choices) : "Level fade in" : 0 =
    [ 
        0: "No"
        1: "Yes"
    ]
    gametitle(choices) : "Display game title" : 0 = 
    [ 
        0: "No"
        1: "Yes"
    ]
    newunit(choices) : "New level unit" : 0 = 
    [
        0: "No, keep current"
        1: "Yes, clear previous levels"
    ]
    // Admer: removed grunt;scientist here
    mapteams(string) : "Map team list"
    defaultteam(choices) : "Default team" : 0 = 
    [
        0: "Fewest players"
        1: "First team"
    ]
    defaultctf(choices) : "Default CTF" : 0 =
    [
        0: "Not CTF map"
        1: "CTF map"
    ]
]

//
// BaseClasses
//

@BaseClass = Sequence
[
    sequence(integer) : "Animation sequence (editor)" : : "Sequence to display in the editor. This does not affect gameplay."
]

@BaseClass = ZHLT
[
    zhlt_lightflags(choices) : "ZHLT lightflags" : 0 =
    [
        0: "Default"
        1: "Embedded fix"
        2: "Opaque (blocks light)"
        3: "Opaque + embedded fix"
        6: "Opaque + concave fix"
    ]
    light_origin(string) : "Light origin target"
]

@BaseClass = ZHLT_point
[
    _fade(string) : "ZHLT fade" : "1.0"
    _falloff(choices) : "ZHLT falloff" : 0 =
    [
        0: "Default"
        1: "Inverse linear"
        2: "Inverse square"
    ]
]

@BaseClass = Appearflags
[
    spawnflags(flags) =
    [
        2048: "Not in deathmatch" : 0
    ]
]

@BaseClass = Angles
[
    angles(string) : "Pitch yaw roll (Y Z X)" : "0 0 0"
]

@BaseClass size(0 0 0, 32 32 32) color(80 0 200) base(Appearflags, Angles) = Ammo []

@BaseClass = Targetname 
[ 
    targetname(target_source) : "Name"
]
@BaseClass = Target 
[ 
    target(target_destination) : "Target" 
]
@BaseClass size(-16 -16 0, 16 16 32) color(0 0 200) base(Targetname, Appearflags, Angles) = Weapon []
@BaseClass = Global 
[ 
    globalname(string) : "Global entity name" 
]

@BaseClass base(Target) = Targetx 
[
    killtarget(target_destination) : "Kill target"
    delay(string) : "Delay before trigger" : "0"
]

@BaseClass = RenderFxChoices
[
    renderfx(choices) :"Render FX" : 0 =
    [
        0: "Normal"
        1: "Slow pulse"
        2: "Fast pulse"
        3: "Slow wide pulse"
        4: "Fast wide pulse"
        9: "Slow strobe"
        10: "Fast strobe"
        11: "Faster ptrobe"
        12: "Slow flicker"
        13: "Fast flicker"
        5: "Slow fade away"
        6: "Fast fade away"
        7: "Slow become solid"
        8: "Fast become solid"
        14: "Constant glow"
        15: "Distort"
        16: "Hologram (distort + fade)"
    ]
]

@BaseClass base(RenderFxChoices) = RenderFields 
[
    rendermode(choices) : "Render mode" : 0 =
    [
        0: "Normal"
        1: "Color"
        2: "Texture"
        3: "Glow"
        4: "Solid"
        5: "Additive"
    ]
    renderamt(integer) : "Render amount (1 - 255)"
    rendercolor(color255) : "Render color (R G B)" : "0 0 0"
]

@BaseClass base(Appearflags, Angles) flags(Angle) size(-16 -16 -36, 16 16 36) color(0 255 0) offset(0 0 36) = PlayerClass []

@BaseClass base(Target, Targetname, RenderFields, Angles) flags(Angle) color(0 200 200) = Monster 
[
    TriggerTarget(string) : "Trigger target"
    TriggerCondition(choices) : "Trigger condition" : 0 =
    [
      0: "No trigger"
      1: "See player, mad at player"
      2: "Take damage"
      3: "50% health remaining"
      4: "Death"
      7: "Hear world"
      8: "Hear player"
      9: "Hear combat"
      10: "See player unconditional"
      11: "See player, not in combat"
    ]
    
    spawnflags(flags) = 
    [
      1: "Wait until seen" : 0
      2: "Gag" : 0
      4: "Monster clip" : 0
      16: "Prisoner" : 0
      128: "Wait for script" : 0
      256: "Pre-disaster" : 0
      512: "Fade corpse" : 0
    ]
]

@BaseClass = TalkMonster
[
    UseSentence(string) : "Use sentence"
    UnUseSentence(string) : "Unuse sentence"
]

@BaseClass base(Targetname, Angles) size(-16 -16 -16, 16 16 16) = gibshooterbase
[
    // how many pieces to create
    m_iGibs(integer) : "Number of gibs" : 3
  
    // delay (in seconds) between shots. If 0, all gibs shoot at once.
    delay(string) : "Delay between shots" : "0"

    // how fast the gibs are fired
    m_flVelocity(integer) : "Gib velocity" : 200

    // Course variance
    m_flVariance(string) : "Course variance" : "0.15"

    // Time in seconds for gibs to live +/- 5%
    m_flGibLife(string) : "Gib life" : "4"

    spawnflags(flags) = 
    [
        1: "Repeatable"  : 0
    ]
]

@BaseClass = Light 
[
    _light(color255) : "Brightness" : "255 255 128 200"
    style(choices) : "Appearance" : 0 =
    [
        0: "Normal"
        10: "Fluorescent flicker"
        2: "Slow, strong pulse"
        11: "Slow pulse, no black"
        5: "Gentle pulse"
        1: "Flicker A"
        6: "Flicker B"
        3: "Candle A"
        7: "Candle B"
        8: "Candle C"
        4: "Fast strobe"
        9: "Slow strobe"
    ]
    pattern(string) : "Custom appearance"
]

@BaseClass base(Targetname,Global) = Breakable
[
    target(target_destination) : "Target on break"
    health(integer) : "Strength" : 1
    material(choices) :"Material type" : 0 =
    [
        0: "Glass"
        1: "Wood"
        2: "Metal"
        3: "Flesh"
        4: "Cinder block"  
        5: "Ceiling tile"
        6: "Computer"
        7: "Unbreakable glass"
        8: "Rocks"
    ]
    explosion(choices) : "Gibs direction" : 0 =
    [
        0: "Random"
        1: "Relative to attack"
    ]
    delay(string) : "Delay before fire" : "0"
    gibmodel(studio) : "Gib model" : ""
    spawnobject(choices) : "Spawn on break" : 0 =
    [
        0: "Nothing"
        1: "Battery"
        2: "Healthkit"
        3: "9mm handgun"
        4: "9mm clip"
        5: "Machine gun"
        6: "Machine gun clip"
        7: "Machine gun grenades"
        8: "Shotgun"
        9: "Shotgun shells"
        10: "Crossbow"
        11: "Crossbow bolts"
        12: "357"
        13: "357 clip"
        14: "RPG"
        15: "RPG clip"
        16: "Gauss clip"
        17: "Hand grenade"
        18: "Tripmine"
        19: "Satchel charge"
        20: "Snark"
        21: "Hornet gun"
    ]
    explodemagnitude(integer) : "Explode magnitude (0=none)" : 0
]

@BaseClass base(Appearflags, Targetname, RenderFields, Global, Angles) = Door
[
    killtarget(target_destination) : "Kill target"
    speed(integer) : "Speed" : 100
    master(string) : "Master" 
    movesnd(choices) : "Move sound" : 0 = 
    [
        0: "No sound"
        1: "Servo (sliding)"
        2: "Pneumatic (sliding)"
        3: "Pneumatic (rolling)"
        4: "Vacuum"
        5: "Power hydraulic"
        6: "Large rollers"
        7: "Track door"
        8: "Snappy metal door"
        9: "Squeaky 1"
        10: "Squeaky 2"
    ]
    stopsnd(choices) : "Stop sound" : 0 = 
    [
        0: "No sound"
        1: "Clang with brake"
        2: "Clang reverb"
        3: "Ratchet stop"
        4: "Chunk"
        5: "Light airbrake"
        6: "Metal slidesStop"
        7: "Metal lock stop"
        8: "Snappy metal stop"
    ]
    wait(choices) : "Delay before close" : 4 = 
    [
        -1: "Stays open"
    ]
    lip(integer) : "Lip"
    dmg(integer) : "Damage inflicted when blocked" : 0
    message(string) : "Message if triggered"
    target(target_destination) : "Target"
    delay(integer) : "Delay before fire" 
    netname(string) : "Fire on close"
    health(integer) : "Health (shoot open)" : 0
    spawnflags(flags) =
    [
        1: "Starts open" : 0
        4: "Don't link" : 0
        8: "Passable" : 0
        32: "Toggle" : 0
        256: "Use only" : 0
        512: "Monsters can't" : 0
    ]
    // NOTE: must be duplicated in BUTTON
    locked_sound(choices) : "Locked sound" : 0 = 
    [
        0: "None"
        2: "Access denied"
        8: "Small zap"
        10: "Buzz"
        11: "Buzz off"
        12: "Latch locked"
    ]
    unlocked_sound(choices) : "Unlocked sound" : 0 = 
    [
        0: "None"
        1: "Big zap & warmup"
        3: "Access granted"
        4: "Quick combolock"
        5: "Power deadbolt 1"
        6: "Power deadbolt 2"
        7: "Plunger"
        8: "Small zap"
        9: "Keycard sound"
        10: "Buzz"
        13: "Latch unlocked"
    ]
    locked_sentence(choices) : "Locked sentence" : 0 = 
    [
        0: "None"
        1: "Gen. access denied"
        2: "Security lockout"
        3: "Blast door"
        4: "Fire door"
        5: "Chemical door"
        6: "Radiation door"
        7: "Gen. containment"
        8: "Maintenance door"
        9: "Broken Shut door"
    ]
    unlocked_sentence(choices) : "Unlocked sentence" : 0 = 
    [
        0: "None"
        1: "Gen. access granted"
        2: "Security disengaged"
        3: "Blast door"
        4: "Fire door"
        5: "Chemical door"
        6: "Radiation door"
        7: "Gen. containment"
        8: "Maintenance area"
    ] 
    _minlight(string) : "Minimum light level"
]

@BaseClass base(Targetname, Target, RenderFields, Global, Angles) = BaseTank
[
    spawnflags(flags) =
    [
        1: "Active" : 0
        16: "Only direct" : 0
        32: "Controllable" : 0
    ]

    // Mainly for use with 1009 team settings (game_team_master)
    master(string) : "(Team) Master" 

    yawrate(string) : "Yaw rate" : "30"
    yawrange(string) : "Yaw range" : "180"
    yawtolerance(string) : "Yaw tolerance" : "15"
    pitchrate(string) : "Pitch rate" : "0"
    pitchrange(string) : "Pitch range" : "0"
    pitchtolerance(string) : "Pitch tolerance" : "5"
    barrel(string) : "Barrel length" : "0"
    barrely(string) : "Barrel horizontal" : "0"
    barrelz(string) : "Barrel vertical" : "0"
    spritesmoke(string) : "Smoke sprite" : ""
    spriteflash(string) : "Flash sprite" : ""
    spritescale(string) : "Sprite scale" : "1"
    rotatesound(sound) : "Rotate sound" : ""
    firerate(string) : "Rate of fire" : "1"
    bullet_damage(string) : "Damage per bullet" : "0"
    persistence(string) : "Firing persistence" : "1"
    firespread(choices) : "Bullet accuracy" : 0 =
    [
        0: "Perfect shot"
        1: "Small cone"
        2: "Medium cone"
        3: "Large cone"
        4: "Extra-large cone"
    ]
    minRange(string) : "Minmum target range" : "0"
    maxRange(string) : "Maximum target range" : "0"
    _minlight(string) : "Minimum light level"
]

@BaseClass = PlatSounds 
[
    movesnd(choices) : "Move sound" : 0 = 
    [
        0: "No sound"
        1: "Big elev 1"
        2: "Big elev 2"
        3: "Tech elev 1"
        4: "Tech elev 2"
        5: "Tech elev 3"
        6: "Freight elev 1"
        7: "Freight elev 2"
        8: "Heavy elev"
        9: "Rack elev"
        10: "Rail elev"
        11: "Squeek elev"
        12: "Odd elev 1"
        13: "Odd elev 2"
    ]
    stopsnd(choices) : "Stop sound" : 0 = 
    [
        0: "No sound"
        1: "Big elev stop1"
        2: "Big elev stop2"
        3: "Freight elev stop"
        4: "Heavy elev stop"
        5: "Rack stop"
        6: "Rail stop"
        7: "Squeek stop"
        8: "Quick stop"
    ]
    volume(string) : "Sound volume 0.0 - 1.0" : "0.85"
]

@BaseClass base(Targetname, RenderFields, Global, PlatSounds) = Trackchange
[
    height(integer) : "Travel altitude" : 0
    spawnflags(flags) =
    [
        1: "Auto activate train" : 0
        2: "Relink track" : 0
        8: "Start at Bottom" : 0
        16: "Rotate only" : 0
        64: "X axis" : 0
        128: "Y axis" : 0
    ]
    rotation(integer) : "Spin amount" : 0
    train(target_destination) : "Train to switch"
    toptrack(target_destination) : "Top track"
    bottomtrack(target_destination) : "Bottom track"
    speed(integer) : "Move/rotate speed" : 0
]

@BaseClass base(Target, Targetname) = Trigger
[
    killtarget(target_destination) : "Kill target"
    netname(target_destination) : "Target path"
    master(string) : "Master" 
    sounds(choices) : "Sound style" : 0 =
    [
        0: "No Sound"
    ]
    delay(string) : "Delay before trigger" : "0"
    message(string) : "Message (set sound too!)"
    spawnflags(flags) = 
    [
        1: "Monsters" : 0
        2: "No Clients" : 0
        4: "Pushables": 0
    ]
]

//
// Entities
//

@PointClass base(Targetname, Targetx, Angles) size(-16 -16 0, 16 16 72) flags(Angle) color(255 0 255) = aiscripted_sequence : "AI scripted sequence"
[
    m_iszEntity(string) : "Target monster"
    m_iszPlay(string) : "Action animation" : ""
    m_flRadius(integer) : "Search radius" : 512
    m_flRepeat(integer) : "Repeat rate ms" : 0
    m_fMoveTo(choices) : "Move to position" : 0 =
    [
      0: "No"
      1: "Walk"
      2: "Run"
      4: "Instantaneous"
      5: "No - turn to face"
    ]
    m_iFinishSchedule(choices) : "AI schedule when done" : 0 =
    [
      0: "Default AI"
      1: "Ambush"
    ]
    spawnflags(flags) = 
    [
        4: "Repeatable" : 0
        8: "Leave corpse" : 0
    ]
]

@PointClass iconsprite("sprites/speaker.spr") base(Targetname) = ambient_generic : "Generic sound emitter"
[
    message(sound) : "Path/filename.wav of WAV"
    health(integer) : "Volume (10 = loudest)" : 10
    preset(choices) :"Dynamic presets" : 0 =
    [
        0: "None"
        1: "Huge machine"
        2: "Big machine"
        3: "Machine"
        4: "Slow fade in"  
        5: "Fade in"
        6: "Quick fade in"
        7: "Slow pulse"
        8: "Pulse"
        9: "Quick pulse"
        10: "Slow oscillator"
        11: "Oscillator"
        12: "Quick oscillator"
        13: "Grunge pitch"
        14: "Very low pitch"
        15: "Low pitch"
        16: "High pitch"
        17: "Very high pitch"
        18: "Screaming pitch"
        19: "Oscillate spinup/down"
        20: "Pulse spinup/down"
        21: "Random pitch"
        22: "Random pitch fast"
        23: "Incremental Spinup"
        24: "Alien"
        25: "Bizzare"
        26: "Planet X"
        27: "Haunted"
    ]
    volstart(integer) : "Start volume" : 0
    fadein(integer) : "Fade in time (0-100)" : 0
    fadeout(integer) : "Fade out time (0-100)" : 0
    pitch(integer) : "Pitch (> 100 = higher)" : 100
    pitchstart(integer) : "Start pitch" : 100
    spinup(integer) : "Spin up time (0-100)" : 0
    spindown(integer) : "Spin down time (0-100)" : 0
    lfotype(integer) : "LFO type 0)off 1)sqr 2)tri 3)rnd" : 0
    lforate(integer) : "LFO rate (0-1000)" : 0
    lfomodpitch(integer) : "LFO mod pitch (0-100)" : 0
    lfomodvol(integer) : "LFO mod vol (0-100)" : 0
    cspinup(integer) : "Incremental spinup count" : 0
    spawnflags(flags) =
    [
        1: "Play Everywhere" : 0
        2: "Small Radius" : 0
        4: "Medium Radius" : 1
        8: "Large Radius" : 0
        16: "Start Silent" : 0
        32: "Is NOT Looped" : 0
    ]
]

//
// ammo
//

@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_9mmclip.mdl") = ammo_9mmclip : "9mm pistol ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_9mmarclip.mdl") = ammo_9mmAR : "9mm assault rifle ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_chainammo.mdl") = ammo_9mmbox : "Box of 200 9mm shells" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_argrenade.mdl") = ammo_ARgrenades : "Assault grenades" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_shotbox.mdl") = ammo_buckshot : "Shotgun ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_357ammobox.mdl") = ammo_357 : "357 ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_rpgammo.mdl") = ammo_rpgclip : "RPG ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_gaussammo.mdl") = ammo_gaussclip : "Gauss gun ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_crossbow_clip.mdl") = ammo_crossbow : "Crossbow ammo" []

@SolidClass base(Target, Targetname, Angles, ZHLT, RenderFields) = button_target : "Shootable button"
[
    spawnflags(flags) =
    [
        1: "Use activates" : 1
        2: "Start on" : 0
    ]
    master(string) : "Master" 
]

//
// cyclers
//

@PointClass base(Targetname, Angles, RenderFields) size(-16 -16 0, 16 16 72) flags(Angle) = cycler : "Model display entity - cycles animations when shot" 
[
    model(studio) : "Model"
    bodygroup(integer) : "Body group" : 0
]

@PointClass base(Targetname, Angles, RenderFields) sprite() = cycler_sprite : "Sprite that can be used to display models" 
[
    model(sprite) : "Sprite"
    framerate(string) : "Frames per second" : "10"
]

// TODO: write a diddly darn description for this thing
@PointClass base(Monster) size(-16 -16 -16, 16 16 16) flags(Angle) = cycler_weapon : "Weapon cycler" 
[
    model(studio) : "model"
]

//
// Environmental effects
//

@BaseClass = BeamStartEnd 
[
    LightningStart(target_destination) : "Start entity" 
    LightningEnd(target_destination) : "Ending entity" 
]

@PointClass base(Targetname, BeamStartEnd, RenderFxChoices) size(-16 -16 -16, 16 16 16) = env_beam : "Energy beam effect"
[
    renderamt(integer) : "Brightness (1 - 255)" : 100
    rendercolor(color255) : "Beam color (R G B)" : "0 0 0"
    Radius(integer) : "Radius" : 256
    life(string) : "Life (seconds 0 = infinite)" : "1"
    BoltWidth(integer) : "Width of beam (pixels*0.1 0-255)" : 20
    NoiseAmplitude(integer) : "Amount of noise (0-255)" : 0
    texture(sprite) : "Sprite name" : "sprites/laserbeam.spr"
    TextureScroll(integer) : "Texture scroll rate (0-100)" : 35
    framerate(integer) : "Frames per 10 seconds" : 0
    framestart(integer) : "Starting frame" : 0
    StrikeTime(string) : "Strike again time (secs)" : "1"
    damage(string) : "Damage per second" : "0"
    spawnflags(flags) = 
    [
        1: "Start on" : 0
        2: "Toggle" : 0
        4: "Random strike" : 0
        8: "Ring" : 0
        16: "Start sparks" : 0
        32: "End sparks" : 0
        64: "Decal end" : 0
        128: "Shade start" : 0
        256: "Shade end" : 0
    ]
]

@PointClass base(Targetname, Angles) size(-4 -4 -4, 4 4 4) = env_beverage : "Beverage spawner"
[
    health(integer) : "Capacity" : 10
    skin(choices) : "Beverage type" : 0 = 
    [
        0: "Coca-Cola"
        1: "Sprite"
        2: "Diet Coke"
        3: "Orange"
        4: "Surge"
        5: "Moxie"
        6: "Random"
    ]
]

@PointClass base(Targetname, Angles) size(-16 -16 -16, 16 16 16) color(255 0 0) = env_blood : "Blood effects" 
[
    color(choices) : "Blood color" : 0 =
    [
        0: "Red (human)"
        1: "Yellow (alien)"
    ]
    amount(string) : "Amount of blood (damage to simulate)" : "100"
    spawnflags(flags) =
    [
        1: "Random direction" : 0
        2: "Blood stream" : 0
        4: "On player" : 0
        8: "Spray decals" : 0
    ]
]

@SolidClass base(Targetname) = env_bubbles : "Bubble volume" 
[
    density(integer) : "Bubble density" : 2
    frequency(integer) : "Bubble frequency" : 2
    current(integer) : "Speed of current" : 0
    spawnflags(flags) = 
    [
        1: "Start off" : 0
    ]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_explosion : "Explosion effect - can deal damage" 
[
    iMagnitude(integer) : "Magnitude" : 100
    spawnflags(flags) =
    [
        1: "No damage" : 0
        2: "Repeatable" : 0
        4: "No fireball" : 0
        8: "No smoke" : 0
        16: "No decal" : 0
        32: "No sparks" : 0
    ]
]

@PointClass base(Targetname) color(255 255 128) = env_global : "Global state"
[
    globalstate(string) : "Global state to set"
    triggermode(choices) : "Trigger mode" : 0 =
    [
        0: "Off"
        1: "On"
        2: "Dead"
        3: "Toggle"
    ]
    initialstate(choices) : "Initial state" : 0 =
    [
        0: "Off"
        1: "On"
        2: "Dead"
    ]
    spawnflags(flags) =
    [
        1: "Set initial state" : 0
    ]
]

@PointClass sprite() base(Targetname, RenderFields) size(-4 -4 -4, 4 4 4) color(30 100 0) = env_glow : "Light glow/haze" 
[
    model(sprite) : "Sprite name" : "sprites/glow01.spr"
    scale(integer) : "Scale" : 1
]

@PointClass base(Targetname) = env_fade : "Screen fade" 
[
    spawnflags(flags) =
    [
        1: "Fade from" : 0
        2: "Modulate" : 0
        4: "Activator Only" : 0
    ]
    duration(string) : "Duration (seconds)" : "2"
    holdtime(string) : "Hold fade (seconds)" : "0"
    renderamt(integer) : "Fade alpha" : 255
    rendercolor(color255) : "Fade color (R G B)" : "0 0 0"
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_funnel : "Large portal funnel" 
[
    spawnflags(flags) =
    [
        1: "Reverse" : 0
    ]
]

@PointClass base(Targetname, RenderFxChoices, Angles) size(-16 -16 -16, 16 16 16) = env_laser : "Laser beam effect"
[
    LaserTarget(target_destination) : "Target of laser" 
    renderamt(integer) : "Brightness (1 - 255)" : 100
    rendercolor(color255) : "Beam color (R G B)" : "0 0 0"
    width(integer) : "Width of beam (pixels*0.1 0-255)" : 20
    NoiseAmplitude(integer) : "Amount of noise (0-255)" : 0
    texture(sprite) : "Sprite name" : "sprites/laserbeam.spr"
    EndSprite(sprite) : "End sprite" : ""
    TextureScroll(integer) : "Texture scroll rate (0-100)" : 35
    framestart(integer) : "Starting frame" : 0
    damage(string) : "Damage per second" : "100"
    spawnflags(flags) = 
    [
        1: "Start on" : 0
        16: "Start sparks" : 0
        32: "End sparks" : 0
        64: "Decal end" : 0
    ]
]

// use game_text instead
@PointClass base(Targetname, Target) = env_message : "HUD text message" 
[
    message(string) : "Message name"
    spawnflags(flags) =
    [
        1: "Play once" : 0
        2: "All clients" : 0
    ]
    messagesound(sound) : "path/filename.wav of WAV"
    messagevolume(string) : "Volume 0-10" : "10"
    messageattenuation(choices) : "Sound radius" : 0 =
    [
        0: "Small radius"
        1: "Medium radius"
        2: "Large radius"
        3: "Play everywhere"
    ]
]

@PointClass base(Targetname, Target, RenderFields) size(-16 -16 -16, 16 16 16) color(100 100 0) = env_render : "Render controls"
[
    spawnflags(flags) =
    [
        1: "No render FX" : 0
        2: "No render amount" : 0
        4: "No render mode" : 0
        8: "No render color" : 0
    ]
]

@PointClass base(Targetname) = env_shake : "Screen shake" 
[
    spawnflags(flags) =
    [
        1: "Global shake" : 0
    ]
    amplitude(string) : "Amplitude 0-16" : "4"
    radius(string) : "Effect radius" : "500"
    duration(string) : "Duration (seconds)" : "1"
    frequency(string) : "0.1 = jerk, 255.0 = rumble" : "2.5"
]

@PointClass base(gibshooterbase, RenderFields) size(-16 -16 -16, 16 16 16) = env_shooter : "Model shooter"
[
    shootmodel(studio) : "Model or sprite name" : ""
    shootsounds(choices) :"Material sound" : -1 =
    [
        -1: "None"
        0: "Glass"
        1: "Wood"
        2: "Metal"
        3: "Flesh"
        4: "Concrete"  
    ]
    scale(string) : "Gib sprite scale" : ""
    skin(integer) : "Gib skin" : 0
]

@PointClass iconsprite("sprites/speaker.spr") = env_sound : "DSP sound effect" 
[
    radius(integer) : "Radius" : 128
    roomtype(choices) : "Room type" : 0 =
    [
        0: "Normal (off)"
        1: "Generic"
        2: "Metal small"
        3: "Metal medium"
        4: "Metal large"
        5: "Tunnel small"
        6: "Tunnel medium"
        7: "Tunnel large"
        8: "Chamber small"
        9: "Chamber medium"
        10: "Chamber large"
        11: "Bright small"
        12: "Bright medium"
        13: "Bright large"
        14: "Water 1"
        15: "Water 2"
        16: "Water 3"
        17: "Concrete small"
        18: "Concrete medium"
        19: "Concrete large"
        20: "Big 1"
        21: "Big 2"
        22: "Big 3"
        23: "Cavern small"
        24: "Cavern medium"
        25: "Cavern large"
        26: "Weirdo 1"
        27: "Weirdo 2"
        28: "Weirdo 3"
    ]
]

@PointClass base(Targetname, Angles) size(-16 -16 -16, 16 16 16) = env_spark : "Spark effect" 
[
    MaxDelay(string) : "Max delay" : "0"
    spawnflags(flags) =
    [
        32: "Toggle" : 0
        64: "Start on" : 0
    ]
]

@PointClass sprite() base(Targetname, RenderFields, Angles) size(-4 -4 -4, 4 4 4) = env_sprite : "Sprite - a floating, textured square" 
[
    framerate(string) : "Framerate" : "10.0"
    model(sprite) : "Sprite name" : "sprites/glow01.spr"
    scale(string) : "Scale" : ""
    spawnflags(flags) =
    [
        1: "Start on" : 0
        2: "Play once" : 0
    ]
]

@SolidClass base(Breakable, RenderFields, Angles, ZHLT) = func_breakable : "Breakable object" 
[
    spawnflags(flags) =
    [
        1: "Only trigger" : 0
        2: "Touch" : 0
        4: "Pressure" : 0
        256: "Instant crowbar" : 1
    ]
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, RenderFields, Angles, ZHLT) = func_button : "Button" 
[
    speed(integer) : "Speed" : 5
    target(target_destination) : "Targetted object"
    health(integer) : "Health (shootable if > 0)"
    lip(integer) : "Lip"
    master(string) : "Master" 
    sounds(choices) : "Sounds" : 0 = 
    [
        0: "None"
        1: "Big zap & warmup"
        2: "Access denied"
        3: "Access granted"
        4: "Quick combolock"
        5: "Power deadbolt 1"
        6: "Power deadbolt 2"
        7: "Plunger"
        8: "Small zap"
        9: "Keycard sound"
        10: "Buzz"
        11: "Buzz off"
        14: "Lightswitch"
    ]
    wait(choices) : "Delay before reset" : 3 =
    [
        -1: "Stays pressed"
    ]
    delay(string) : "Delay before trigger" : "0"
    spawnflags(flags) =
    [
        1: "Don't move" : 0
        32: "Toggle" : 0
        64: "Sparks" : 0
        256:"Touch activates": 0
    ]
    locked_sound(choices) : "Locked sound" : 0 = 
    [
        0: "None"
        2: "Access denied"
        8: "Small zap"
        10: "Buzz"
        11: "Buzz off"
        12: "Latch locked"
    ]
    unlocked_sound(choices) : "Unlocked sound" : 0 = 
    [
        0: "None"
        1: "Big zap & warmup"
        3: "Access granted"
        4: "Quick combolock"
        5: "Power deadbolt 1"
        6: "Power deadbolt 2"
        7: "Plunger"
        8: "Small zap"
        9: "Keycard sound"
        10: "Buzz"
        13: "Latch unlocked"
        14: "Lightswitch"
    ]
    locked_sentence(choices) : "Locked sentence" : 0 = 
    [
        0: "None"
        1: "Gen. access denied"
        2: "Security lockout"
        3: "Blast door"
        4: "Fire door"
        5: "Chemical door"
        6: "Radiation door"
        7: "Gen. containment"
        8: "Maintenance door"
        9: "Broken shut door"
    ]
    unlocked_sentence(choices) : "Unlocked sentence" : 0 = 
    [
        0: "None"
        1: "Gen. access granted"
        2: "Security disengaged"
        3: "Blast door"
        4: "Fire door"
        5: "Chemical door"
        6: "Radiation door"
        7: "Gen. containment"
        8: "Maintenance area"
    ]
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, RenderFields, Angles, ZHLT) = func_conveyor : "Conveyor belt" 
[
    spawnflags(flags) =
    [
        1: "No push" : 0
        2: "Not solid" : 0
    ]
    speed(string) : "Conveyor speed" : "100"
    _minlight(string) : "Minimum light level"
]

@SolidClass = func_detail : "Non-structural brushes"
[
    // You can leave the detail level to 1. For tiny objects, you might set to 2, so that they won't chop faces of other func_details.
    zhlt_detaillevel(integer) : "Detail level" : 1
    // For large shapes such as terrain and walls, set this to no less than their detail level, so that they can chop the faces of adjacent world brushes.
    zhlt_chopdown(integer) : "Lower its level to chop others" : 0
    // Usually you don't have to use this.
    zhlt_chopup(integer) : "Raise its level to get chopped" : 0
    // For brushes in the same detail level and have overlapping faces (which are on the same plane), this priority determines which one will appear.
    zhlt_coplanarpriority(integer) : "Priority when faces overlap" : 0
    // Setting this to 0 will reduce clipnode count, but will lose the benefit of func_detail's better content deciding method which is designed to prevent "Ambiguous leafnode contents" problem.
    zhlt_clipnodedetaillevel(integer) : "Detail level of cliphulls" : 1
    // Very useful option which can reduce clipnode count.
    zhlt_noclip(choices) : "Passable" : "" =
    [
        "": "No"
        1: "Yes"
    ]
]

@SolidClass base(Door, ZHLT) = func_door : "Basic door" []

@SolidClass base(Door, ZHLT) = func_door_rotating : "Rotating door" 
[
    spawnflags(flags) =
    [
        2: "Reverse dir" : 0
        16: "One-way" : 0
        64: "X axis" : 0
        128: "Y axis" : 0
    ]
    distance(integer) : "Distance (deg)" : 90
    angles(string) : "Pitch yaw roll (Y Z X)" : "0 0 0"
]

@SolidClass base(Appearflags, RenderFields, ZHLT) = func_friction : "Surface with a change in friction" 
[
    modifier(integer) : "Friction (0 - 100)" : 15
]

@SolidClass base(Targetname, Global, RenderFields, Angles, ZHLT) = func_guntarget : "Moving platform" 
[
    speed(integer) : "Speed (units per second)" : 100
    target(target_source) : "First stop target"
    message(target_source) : "Fire on damage"
    health(integer) : "Damage to take" : 0
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Global, RenderFields, ZHLT) = func_healthcharger : "Wall health recharger" 
[
    // dmdelay(integer) : "Deathmatch recharge delay" : 0
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, RenderFields, ZHLT) = func_illusionary : "Fake wall/light" 
[
    skin(choices) : "Contents" : -1 =
    [
        -1: "Empty"
        -7: "Volumetric light"
    ]
    _minlight(string) : "Minimum light level"
]

// THIS CREATES AN INVISIBLE CLIMBABLE FIELD
// You must create the physical ladder yourself
@SolidClass base(Targetname) = func_ladder : "Ladder" []

// blocks monster path ai
@SolidClass base(Targetname) = func_monsterclip : "Monster clip brush" []

@SolidClass base(Targetname) = func_mortar_field : "Mortar field" 
[
    m_flSpread(integer) : "Spread radius" : 64
    m_iCount(integer) : "Repeat count" : 1
    m_fControl(choices) : "Targeting" : 0 =
    [
        0: "Random"
        1: "Activator"
        2: "Table"
    ]
    m_iszXController(target_destination) : "X controller"
    m_iszYController(target_destination) : "Y controller"
]

// not fully implemented
@SolidClass base(Appearflags, Targetname, Global, RenderFields, Angles, ZHLT) = func_pendulum : "Swings back and forth" 
[
    speed(integer) : "Speed" : 100
    distance(integer) : "Distance (deg)" : 90
    damp(integer) : "Damping (0-1000)" : 0
    dmg(integer) : "Damage inflicted when blocked" : 0
    spawnflags(flags) =
    [
        1: "Start on" : 0
        8: "Passable" : 0
        16: "Auto-return" : 0
        64: "X axis" : 0
        128: "Y axis" : 0
    ]

    _minlight(integer) : "_minlight"
]

@SolidClass base(Targetname, Global, RenderFields, PlatSounds, ZHLT) = func_plat : "Elevator" 
[
    spawnflags(flags) =
    [
        1: "Toggle" : 0
    ]
    speed(integer) : "Speed" : 100
    height(integer) : "Travel altitude (can be negative)" : 0
    _minlight(string) : "Minimum light level"
] 

@SolidClass base(Targetname, Global, RenderFields, PlatSounds, Angles, ZHLT) = func_platrot : "Moving rotating platform" 
[
    spawnflags(flags) =
    [
        1: "Toggle" : 1
        64: "X axis" : 0
        128: "Y axis" : 0
    ]
    speed(integer) : "Speed of rotation" : 50
    height(integer) : "Travel altitude (can be negative)" : 0
    rotation(integer) : "Spin amount" : 0
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Breakable, RenderFields, ZHLT) = func_pushable : "Pushable object"
[    
    size(choices) : "Hull size" : 0 =
    [
        0: "Point size"
        1: "Player size"
        2: "Big size"
        3: "Player duck"
    ]
    spawnflags(flags) =
    [
        128: "Breakable" : 0
    ]
    friction(integer) : "Friction (0-400)" : 50
    buoyancy(integer) : "Buoyancy" : 20
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Global, RenderFields, ZHLT) = func_recharge : "Battery recharger" 
[
    // dmdelay(integer) : "Deathmatch recharge delay" : 0
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, RenderFields, Angles, ZHLT) = func_rot_button : "Rotating button" 
[
    target(target_destination) : "Targetted object"
    // changetarget will change the button's target's TARGET field to the button's changetarget.
    changetarget(target_destination) : "ChangeTarget name"
    master(string) : "Master" 
    speed(integer) : "Speed" : 50
    health(integer) : "Health (shootable if > 0)"
    sounds(choices) : "Sounds" : 21 = 
    [
        21: "Squeaky"
        22: "Squeaky pneumatic"
        23: "Ratchet groan"
        24: "Clean ratchet"
        25: "Gas clunk"
    ]
    wait(choices) : "Delay before reset" : 3 =
    [
        -1: "Stays pressed"
    ]
    delay(string) : "Delay before trigger" : "0"
    distance(integer) : "Distance (deg)" : 90
    spawnflags(flags) =
    [
        1: "Not solid" : 0
        2: "Reverse dir" : 0
        32: "Toggle" : 0
        64: "X axis" : 0
        128: "Y axis" : 0
        256:"Touch activates": 0
    ]
    _minlight(integer) : "Minimum light level"
]

@SolidClass base(Targetname, Global, RenderFields, Angles, ZHLT) = func_rotating : "Rotating object"
[
    speed(integer)  : "Rotation speed" : 0
    volume(integer) : "Volume (10 = loudest)" : 10
    fanfriction(integer) : "Friction (0 - 100%)" : 20
    sounds(choices) : "Fan sounds" : 0 =
    [
        0: "No sound" 
        1: "Fast whine"
        2: "Slow rush"
        3: "Medium rickety"
        4: "Fast beating"
        5: "Slow smooth"
    ]
    message(sound) : "Path/filename.wav of WAV"
    spawnflags(flags) =
    [
        1: "Start on" : 0
        2: "Reverse direction" : 0
        4: "X axis" : 0
        8: "Y axis" : 0
        16: "Acc/dcc" : 0
        32: "Fan pain" : 0
        64: "Not solid" : 0
        128: "Small radius" : 0
        256: "Medium radius" : 0
        512: "Large radius" : 1 
    ]
    _minlight(integer) : "Minimum light level"
    spawnorigin(string) : "X Y Z - move here after lighting" : "0 0 0"
    dmg(integer) : "Damage inflicted when blocked" : 0
    movedir(string) : "Custom rotation axis" : : "By default, the rotation axis is 0 1 0 if the axis flags are off; won't work if 'X axis' or 'Y axis' are on"
]

// don't forget func_tankcontrols
@SolidClass base(BaseTank, ZHLT) = func_tank : "Brush gun turret" 
[
    bullet(choices) : "Bullets" : 0 = 
    [
        0: "None"
        1: "9mm"
        2: "MP5"
        3: "12mm"
    ]
]

@SolidClass = func_tankcontrols : "Tank controls"
[
    target(target_destination) : "Tank entity name"
]

// don't forget func_tankcontrols
@SolidClass base(BaseTank, ZHLT) = func_tanklaser : "Brush laser turret" 
[
    laserentity(target_source) : "env_laser entity"
]

// don't forget func_tankcontrols
@SolidClass base(BaseTank, ZHLT) = func_tankrocket : "Brush rocket turret" []

// don't forget func_tankcontrols
@SolidClass base(BaseTank, ZHLT) = func_tankmortar : "Brush mortar turret" 
[
    iMagnitude(integer) : "Explosion magnitude" : 100
]

@SolidClass base(Trackchange, ZHLT) = func_trackautochange : "Automatic track changing platform"
[
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Trackchange, ZHLT) = func_trackchange : "Train track changing platform"
[
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, RenderFields, Angles, ZHLT) = func_tracktrain : "Train that follows path_tracks" 
[
    spawnflags(flags) =
    [
        1: "No pitch (X-rot)" : 0
        2: "No user Control" : 0
        8: "Passable" : 0
    ]
    target(target_destination) : "First stop target"
    sounds(choices) : "Sound" : 0 =
    [
        0: "None"
        1: "Rail 1"
        2: "Rail 2"
        3: "Rail 3"
        4: "Rail 4"
        5: "Rail 6"
        6: "Rail 7"
    ]
    wheels(integer) : "Distance between the wheels" : 50
    height(integer) : "Height above track" : 4
    startspeed(integer) : "Initial speed" : 0
    speed(integer) : "Speed (units per second)" : 64
    dmg(integer) : "Damage on crush" : 0  
    volume(integer) : "Volume (10 = loudest)" : 10
    bank(string) : "Bank angle on turns" : "0"
    _minlight(string) : "Minimum light level"
]

@SolidClass = func_traincontrols : "Train controls"
[
    target(target_destination) : "Train name"
]

@SolidClass base(Targetname, Global, RenderFields, ZHLT) = func_train : "Moving platform" 
[
    target(target_source) : "First stop target"
    movesnd(choices) : "Move sound" : 0 = 
    [
        0: "No sound"
        1: "Big elev 1"
        2: "Big elev 2"
        3: "Tech elev 1"
        4: "Tech elev 2"
        5: "Tech elev 3"
        6: "Freight elev 1"
        7: "Freight elev 2"
        8: "Heavy elev"
        9: "Rack elev"
        10: "Rail elev"
        11: "Squeek elev"
        12: "Odd elev 1"
        13: "Odd elev 2"
    ]
    stopsnd(choices) : "Stop sound" : 0 = 
    [
        0: "No Sound"
        1: "Big elev stop 1"
        2: "Big elev stop 2"
        3: "Freight elev stop"
        4: "Heavy elev stop"
        5: "Rack stop"
        6: "Rail stop"
        7: "Squeek stop"
        8: "Quick stop"
    ]
    speed(integer) : "Speed (units per second)" : 64
    dmg(integer) : "Damage on crush" : 0
    skin(integer) : "Contents" : 0
    volume(string) : "Sound volume 0.0 - 1.0" : "0.85"
    spawnflags(flags) =
    [
        8: "Not solid" : 0
    ]
    _minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, Appearflags, RenderFields, ZHLT) = func_wall : "Wall" 
[
    _minlight(string) : "Minimum light level"
]

@SolidClass base(func_wall) = func_wall_toggle : "Toggleable geometry" 
[
    spawnflags(flags) =
    [
        1: "Starts invisible" : 0
    ]
]

@SolidClass base(Door, ZHLT) = func_water : "Liquid" 
[
    spawnflags(flags) =
    [
        1: "Starts open" : 0
        256: "Use only" : 0
    ]
    skin(choices) : "Contents" : -3 =
    [
        -3: "Water"
        -4: "Slime"
        -5: "Lava"
    ]
    WaveHeight(string) : "Wave height" : "3.2"
]

//
// Game entities 
//

@PointClass base(Targetname, Targetx) = game_counter : "Fires when it hits limit"
[
    spawnflags(flags) =
    [
        1: "Remove on fire" : 0
        2: "Reset on fire" : 1
    ]
    master(string) : "Master"
    frags(integer) : "Initial value" : 0
    health(integer) : "Limit value" : 10
]

@PointClass base(Targetname, Target) = game_counter_set : "Sets a game_counter"
[
    spawnflags(flags) =
    [
        1: "Remove on fire" : 0
    ]
    master(string) : "Master"
    frags(integer) : "New value" : 10
]

@PointClass base(Targetname) = game_end : "End this multiplayer game" 
[
    master(string) : "Master" 
]

@PointClass base(Targetname) = game_player_equip : "Initial player equipment"
[
    spawnflags(flags) =
    [
        1: "Use only" : 0
    ]
    master(string) : "Team master"
]

@PointClass base(Targetname) = game_player_hurt : "Hurts player who fires"
[
    dmg(string) : "Damage to apply" : "999"
    spawnflags(flags) =
    [
        1: "Remove on fire" : 0
    ]
    master(string) : "Master" 
]

@PointClass base(Targetname) = game_player_team : "Allows player to change teams"
[
    spawnflags(flags) =
    [
        1: "Remove on fire" : 0
        2: "Kill player" : 0
        4: "Gib player" : 0
    ]
    target(string) : "game_team_master to use" 
    master(string) : "Master"
]

@PointClass base(Targetname) = game_score : "Award/deduct points" 
[
    spawnflags(flags) =
    [
        1: "Allow negative" : 0
        2: "Team points" : 0
    ]   
    
    points(integer) : "Points to add (+/-)" : 1
    master(string) : "Master" 
]

@PointClass base(Targetname, Targetx) = game_team_master : "Team based master/relay"
[
    spawnflags(flags) =
    [
        1: "Remove on fire" : 0
    ]
    triggerstate(choices) : "Trigger state" : 0 = 
    [
        0: "Off"
        1: "On"
        2: "Toggle"
    ]
    teamindex(integer) : "Team Index (-1 = no team)" : -1
    master(string) : "Master" 
]

@PointClass base(Targetname, Targetx) = game_team_set : "Sets team of team_master"
[
    spawnflags(flags) =
    [
        1: "Remove on fire" : 0
    ]
    master(string) : "Master" 
]

@PointClass base(Targetname, Target) = game_text : "HUD text message" 
[
    spawnflags(flags) =
    [
        1: "All players" : 0
    ]

    message(string) : "Message text"
    x(string) : "X (0 - 1.0 = left to right) (-1 centers)" : "-1"
    y(string) : "Y (0 - 1.0 = top to bottom) (-1 centers)" : "-1"
    effect(choices) : "Text effect" : 0 =
    [
        0: "Fade in/out"
        1: "Credits"
        2: "Scan out"
    ]
    color(color255) : "Color 1" : "100 100 100"
    color2(color255) : "Color 2" : "240 110 0"
    fadein(string) : "Fade in time (or character scan time)" : "1.5"
    fadeout(string) : "Fade out time" : "0.5"
    holdtime(string) : "Hold time" : "1.2"
    fxtime(string) : "Scan time (scan effect only)" : "0.25"
    channel(choices) : "Text channel" : 1 =
    [
        1: "Channel 1"
        2: "Channel 2"
        3: "Channel 3" 
        4: "Channel 4"
    ]
    master(string) : "Master" 
]

@SolidClass base(Targetname) = game_zone_player : "Player zone brush"
[
    intarget(target_destination) : "Target for IN players"
    outtarget(target_destination) : "Target for OUT players"
    incount(target_destination) : "Counter for IN players"
    outcount(target_destination) : "Counter for OUT players"
    // master(string) : "Master" 
]

@PointClass base(gibshooterbase) = gibshooter : "Gib shooter" []

//
// info entities
//

@PointClass decal() base(Targetname, Appearflags) = infodecal : "Decal"
[
    texture(decal)
]

@PointClass base(Targetname) size(-24 -24 0, 24 24 16) color(20 190 60) = info_bigmomma : "Big Momma node" 
[
    spawnflags(flags) =
    [
        1: "Run to node" : 0
        2: "Wait indefinitely" : 0
    ]
    target(target_destination) : "Next node"
    radius(string) : "Radius" : "0"
    reachdelay(string) : "Wait after approach" : "0"
    killtarget(target_destination) : "Kill target"
    reachtarget(target_destination) : "Fire on approach"
    reachsequence(string) : "Sequence on approach" : ""
    health(string) : "Health on approach" : ""
    presequence(string) : "Sequence before approach" : ""
]

@PointClass base(Target, Angles) size(-4 -4 -4, 4 4 4) color(0 255 0) = info_intermission : "Intermission spot" []

@PointClass base(Targetname) = info_landmark : "Transition landmark" []

@PointClass size(-24 -24 -4, 24 24 4) color(255 255 0) = info_node : "AI node" []

@PointClass size(-32 -32 0, 32 32 64) color(255 255 0) = info_node_air : "AI air node" []

@PointClass base(Targetname) = info_null : "info_null (spotlight target)" []

@PointClass base(PlayerClass) studio("models/player.mdl") = info_player_coop : "Player cooperative start" []
@PointClass base(PlayerClass) studio("models/player.mdl") = info_player_deathmatch : "Player deathmatch start" 
[
    target(target_destination) : "Target"
    master(string) : "Master"
]
@PointClass base(PlayerClass) studio("models/player.mdl") = info_player_start : "Singleplayer start" []

@PointClass base(Targetname) size(-4 -4 -4, 4 4 4) color(200 100 50) = info_target : "Beam target" []
@PointClass size(-8 -8 0, 8 8 16) base(PlayerClass, Targetname) = info_teleport_destination : "Teleport destination" []

//
// items
//

@PointClass size(-16 -16 0, 16 16 36) base(Weapon, Targetx) studio("models/w_oxygen.mdl") = item_airtank : "Oxygen tank" []
@PointClass size(-16 -16 0, 16 16 36) base(Weapon, Targetx) studio("models/w_antidote.mdl") = item_antidote : "Poison antidote" []
@PointClass size(-16 -16 0, 16 16 36) base(Weapon, Targetx) studio("models/w_battery.mdl") = item_battery : "HEV battery" []
@PointClass size(-16 -16 0, 16 16 36) base(Weapon, Targetx) studio("models/w_medkit.mdl") = item_healthkit : "Small health kit" []
@PointClass size(-16 -16 0, 16 16 36) base(Weapon, Targetx) studio("models/w_longjump.mdl") = item_longjump : "Longjump module" []
@PointClass size(-16 -16 0, 16 16 36) base(Weapon, Targetx) studio("models/w_security.mdl") = item_security : "Security card" []
@PointClass size(-16 -16 0, 16 16 36) base(Weapon, Targetx) studio("models/w_suit.mdl") = item_suit : "HEV suit" 
[
    body(choices) : "Body" : 0 =
    [
        0: "Standing"
        1: "Laying flat"
    ]
    spawnflags(flags) =
    [
        1: "Short logon" : 0
    ]
]

//
// lights
//

@PointClass iconsprite("sprites/lightbulb.spr") base(Target, Targetname, Light, ZHLT_point) flags(Light) = light : "Invisible lightsource"
[
    spawnflags(flags) = 
    [ 
        1: "Initially dark" : 0 
    ]
]

@PointClass iconsprite("sprites/lightbulb.spr") base(Targetname, Target, Angles, ZHLT_point) flags(Light) = light_spot : "Spotlight" 
[
    _cone(integer) : "Inner (bright) angle" : 30
    _cone2(integer) : "Outer (fading) angle" : 45
    pitch(integer) : "Pitch" : -90
    _light(color255) : "Brightness" : "255 255 128 200"
    _sky(choices) : "Is sky" : 0 = 
    [ 
        0: "No"
        1: "Yes"
    ]
    spawnflags(flags) = 
    [ 
        1: "Initially dark" : 0 
    ]
    style(choices) : "Appearance" : 0 =
    [
        0: "Normal"
        10: "Fluorescent flicker"
        2: "Slow, strong pulse"
        11: "Slow pulse, no black"
        5: "Gentle pulse"
        1: "Flicker A"
        6: "Flicker B"
        3: "Candle A"
        7: "Candle B"
        8: "Candle C"
        4: "Fast strobe"
        9: "Slow strobe"
    ]
    pattern(string) : "Custom appearance"
]

@PointClass base(Targetname, Angles, ZHLT_point) iconsprite("sprites/lightbulb.spr") flags(Light) = light_environment : "Environment" 
[
    pitch(integer) : "Pitch" : 0
    _light(color255) : "Brightness" : "255 255 128 200"
]

@SolidClass base(Door, ZHLT) = momentary_door : "Momentary/continuous door" 
[
    spawnflags(flags) =
    [
        1: "Starts open" : 0
    ]
]

@SolidClass base(RenderFields, Targetname, Angles, ZHLT) = momentary_rot_button : "Direct wheel control" 
[
    target(target_destination) : "Targetted object"
    speed(integer) : "Speed" : 50
    master(string) : "Master" 
    sounds(choices) : "Sounds" : 0 = 
    [
        0: "None"
        1: "Big zap & warmup"
        2: "Access denied"
        3: "Access granted"
        4: "Quick combolock"
        5: "Power deadbolt 1"
        6: "Power deadbolt 2"
        7: "Plunger"
        8: "Small zap"
        9: "Keycard sound"
        21: "Squeaky"
        22: "Squeaky pneumatic"
        23: "Ratchet groan"
        24: "Clean ratchet"
        25: "Gas clunk"
    ]
    distance(integer) : "Distance (deg)" : 90
    returnspeed(integer) : "Auto-return speed" : 0
    spawnflags(flags) =
    [
        1: "Door hack" : 0
        2: "Not useable" : 0
        16: "Auto return" : 0
        64: "X axis" : 0
        128: "Y axis" : 0
    ]
    _minlight(integer) : "Minimum light level"
]

//
// monsters
//

@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/controller.mdl") = monster_alien_controller : "Controller"  []
@PointClass base(Monster, Sequence) size(-32 -32 0, 32 32 64) studio("models/agrunt.mdl") = monster_alien_grunt : "Alien grunt" 
[
    netname(string) : "Squad name"
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/islave.mdl") = monster_alien_slave : "Vortigaunt" 
[
    netname(string) : "Squad name"
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
        64: "Ignore player" : 0
    ]
]
@PointClass base(Monster, Sequence) size(-360 -360 -172, 360 360 8) studio("models/apache.mdl") = monster_apache : "Apache" 
[
    spawnflags(flags) = 
    [
        8: "No wreckage"  : 0
        64: "Start inactive" : 0
    ]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 36) studio("models/baby_headcrab.mdl") = monster_babycrab : "Baby headcrab" []
@PointClass base(RenderFields, Sequence) size(-16 -16 -36, 16 16 0) studio("models/barnacle.mdl") = monster_barnacle : "Barnacle" []
@PointClass base(Monster,TalkMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/barney.mdl") = monster_barney : "Barney"
[
    suspicious(choices) : "Suspicious" : 0 =
    [
        0: "No"
        1: "Yes"
    ]
]
@PointClass base(Targetname,RenderFields,Appearflags, Angles, Sequence) size(-16 -16 0, 16 16 72) studio("models/barney.mdl") = monster_barney_dead : "Dead Barney" 
[
    pose(choices) : "Pose" : 0 =
    [
        0: "On back"
        1: "On side"
        2: "On stomach"
    ]
]
@PointClass base(Monster, Sequence) size(-95 -95 0, 95 95 190) studio("models/big_mom.mdl") = monster_bigmomma : "Big Momma" 
[
    netname(string) : "First node" : ""
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/floater.mdl") = monster_bloater : "Bloater" []
@PointClass base(Monster, Sequence) size(-32 -32 0, 32 32 64) studio("models/bullsquid.mdl") = monster_bullchicken : "Bullsquid" []
@PointClass base(Monster, Sequence) size(-3 -3 0, 3 3 3) studio("models/roach.mdl") = monster_cockroach : "Cockroach" []
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 16) studio("models/aflock.mdl") = monster_flyer_flock : "Flock of Flyers" 
[
    iFlockSize(integer) : "Flock size" : 8
    flFlockRadius(integer) : "Flock radius" : 128
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) = monster_furniture : "Generic monster" 
[
    model(studio) : "model"
]

@PointClass base(Monster, Sequence) size(-32 -32 0, 32 32 128) studio("models/garg.mdl") = monster_gargantua : "Gargantua" []
@PointClass base(Monster, RenderFields, Sequence) size(-16 -16 -36, 16 16 36) = monster_generic : "Generic script monster" 
[
    spawnflags(flags) = 
    [
        4: "Not solid" : 0
        8: "Head Controller" : 0
    ]
    model(studio) : "model"
    body(integer) : "Body" : 0
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/gman.mdl") = monster_gman : "G-Man" []
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/hgrunt.mdl") = monster_grunt_repel : "Human grunt (repel)" []
@PointClass base(Weapon, Targetx, RenderFields, Sequence) studio("models/w_grenade.mdl") = monster_handgrenade : "Live handgrenade" []
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 36) studio("models/headcrab.mdl") = monster_headcrab : "Head crab" []
@PointClass base(Targetname,Appearflags,RenderFields, Angles, Sequence) size(-16 -16 0, 16 16 72) = monster_hevsuit_dead : "Dead HEV suit" 
[
    pose(choices) : "Pose" : 0 =
    [
        0: "On back"
        1: "Seated"
        2: "On stomach"
        3: "On Table"
    ]
]
@PointClass base(Targetname,Appearflags,RenderFields, Angles, Sequence) size(-16 -16 0, 16 16 72) studio("models/hgrunt.mdl") = monster_hgrunt_dead : "Dead human grunt" 
[
    pose(choices) : "Pose" : 0 =
    [
        0: "On stomach"
        1: "On side"
        2: "Seated"
    ]

    body(choices) : "Body" : 0 =
    [
        0: "Grunt with gun"
        1: "Commander with gun"
        2: "Grunt no gun"
        3: "Commander no gun"
    ]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 36) studio("models/houndeye.mdl") = monster_houndeye : "Houndeye" 
[
    netname(string) : "Squad Name"
    spawnflags(flags) =
    [
        32: "SquadLeader" : 0
    ]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/hassassin.mdl") = monster_human_assassin : "Human assassin" []
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/hgrunt.mdl") = monster_human_grunt : "Human grunt" 
[
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]
    netname(string) : "Squad name"
    weapons(choices) : "Weapons" : 3 =
    [
        1: "9mmAR"
        3: "9mmAR + HG"
        5: "9mmAR + GL"
        8: "Shotgun"
        10: "Shotgun + HG"
    ]
]
@PointClass base(Monster, Sequence) size(-32 -32 0, 32 32 64) studio("models/icky.mdl") = monster_ichthyosaur : "Ichthyosaur" []
@PointClass base(Monster, Sequence) size(-6 -6 0, 6 6 6) studio("models/leech.mdl") = monster_leech : "Leech" []
@PointClass base(Monster, Sequence) size(-16 -16 -32, 16 16 32) studio("models/miniturret.mdl") = monster_miniturret : "Mini auto turret"
[
    orientation(choices) : "Orientation" : 0 =
    [
        0: "Floor mount"
        1: "Ceiling mount"
    ]
    spawnflags(flags) = 
    [
        32: "Autostart" : 0
        64: "Start inactive" : 0
    ]
]
@PointClass base(Monster, Sequence) size(-192 -192 0, 192 192 384) studio("models/nihilanth.mdl") = monster_nihilanth : "Nihilanth"  []
@PointClass base(Monster, Sequence) size(-480 -480 -112, 480 480 24) studio("models/osprey.mdl") = monster_osprey : "Osprey"
[
    spawnflags(flags) = 
    [
        64: "Start inactive" : 0
    ]
]
@PointClass base(Monster, Sequence) size(-6 -6 0, 6 6 6) studio("models/bigrat.mdl") = monster_rat : "Rat (no AI)" []
@PointClass base(Weapon,Targetx,RenderFields, Sequence) studio("models/w_satchel.mdl") = monster_satchel : "Live satchel charge" []
@PointClass base(Monster, TalkMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/scientist.mdl") = monster_scientist : "Scared scientist" 
[
    body(choices) : "Body" : -1 =
    [
        -1: "Random"
        0: "Glasses"
        1: "Einstein"
        2: "Luther"
        3: "Slick"
        4: "Einstein w/ clipboard"
        5: "Slick w/ stick"
    ]
    suspicious(choices) : "Suspicious" : 0 =
    [
        0: "No"
        1: "Yes"
    ]
]
@PointClass base(Targetname,Appearflags,RenderFields, Angles, Sequence) size(-16 -16 0, 16 16 72) studio("models/scientist.mdl") = monster_scientist_dead : "Dead scientist" 
[
    body(choices) : "Body" : -1 =
    [
        -1: "Random"
        0: "Glasses"
        1: "Einstein"
        2: "Luther"
        3: "Slick"
    ]
    
    pose(choices) : "Pose" : 0 =
    [
        0: "On back"
        1: "On Stomach"
        2: "Sitting"
        3: "Hanging"
        4: "Table1"
        5: "Table2"
        6: "Table3"
    ]
]
@PointClass base(Monster, Sequence) size(-14 -14 22, 14 14 72) studio("models/scientist.mdl") = monster_sitting_scientist : "Sitting scientist" 
[
    body(choices) : "Body" : -1 =
    [
        -1: "Random"
        0: "Glasses"
        1: "Einstein"
        2: "Luther"
        3: "Slick"
    ]

    suspicious(choices) : "Suspicious" : 0 =
    [
        0: "No"
        1: "Yes"
    ]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/sentry.mdl") = monster_sentry : "Sentry turret gun"
[
    spawnflags(flags) = 
    [
        32: "Autostart" : 0
        64: "Start inactive" : 0
    ]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 36) studio("models/w_squeak.mdl") = monster_snark : "Armed snark" []
@PointClass base(Monster, Sequence) size(-32 -32 0, 32 32 64) studio("models/tentacle2.mdl") = monster_tentacle : "Tentacle arm" 
[
    spawnflags(flags) = 
    [
        64: "Tentacle 3" : 0
    ]

    sweeparc(integer) : "Sweep arc" : 130
    sound(choices) : "Tap sound" : -1 =
    [
        -1: "None"
        0: "Silo"
        1: "Dirt"
        2: "Water"
    ]
]
@PointClass base(Monster, Sequence) studio("models/p_tripmine.mdl") = monster_tripmine : "Active tripmine" 
[
    spawnflags(flags) =
    [
        1: "Instant on" : 1
    ]
]
@PointClass base(Monster, Sequence) size(-32 -32 -32, 32 32 32) studio("models/turret.mdl") = monster_turret : "Auto turret"
[
    orientation(choices) : "Orientation" : 0 =
    [
        0: "Floor mount"
        1: "Ceiling mount"
    ]
    spawnflags(flags) = 
    [
        32: "Autostart" : 0
        64: "Start inactive" : 0
    ]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/zombie.mdl") = monster_zombie : "Scientist zombie" []
@PointClass base(Targetname, Angles) size(-16 -16 -16, 16 16 16) = monstermaker : "Monster maker"
[
    target(string) : "Target on release" 
    monstertype(string) : "Monster type"
    netname(string) : "Childrens' name"
    spawnflags(flags) = 
    [
        1: "Start on"  : 0
        2: "PVS on/off" : 0
        4: "Cyclic" : 0
        8: "Monster clip" : 0
    ]   
    // how many monsters the monstermaker can create (-1 = unlimited)
    monstercount(integer) : "Number of monsters" : -1
    // if delay is -1, new monster will be made when last monster dies.
    // else, delay is how often (seconds) a new monster will be dookied out.
    delay(string) : "Frequency" : "5"   
    // maximum number of live children allowed at one time. (New ones will not be made until one dies)
    // -1 no limit
    m_imaxlivechildren(integer) : "Max live children" : 5
]

@PointClass base(Targetname) color(255 128 0) = multi_manager : "Multi-target manager" 
[
    spawnflags(flags) = 
    [
        1: "Multi-threaded" : 0
    ]
]

@PointClass base(Targetname, Target) color(128 255 128) iconsprite("sprites/multisource.spr") = multisource : "Multisource"
[
    globalstate(string) : "Global state master"
]

@PointClass base(Targetname, Angles) flags(Path) size(16 16 16) color(247 181 82) = path_corner : "Moving platform stop"
[
    spawnflags(flags) =
    [
        1: "Wait for retrigger" : 0
        2: "Teleport" : 0
        4: "Fire once" : 0
    ]
    target(target_destination) : "Next stop target"
    message(target_destination) : "Fire on pass"
    wait(integer) : "Wait here (secs)" : 0
    speed(integer) : "New train speed" : 0
    yaw_speed(integer) : "New train rot. speed" : 0
]

@PointClass base(Targetname) flags(Path) size(16 16 16) = path_track : "Train track path"
[
    spawnflags(flags) =
    [
        1: "Disabled" : 0
        2: "Fire once" : 0
        4: "Branch reverse" : 0
        8: "Disable train" : 0
    ]
    target(target_destination) : "Next stop target"
    message(target_destination) : "Fire on Pass"
    altpath(target_destination) : "Branch path"
    netname(target_destination) : "Fire on dead end"
    speed(integer) : "New train speed" : 0
]

//
// player effects
//

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_loadsaved : "Load auto-saved game" 
[
    duration(string) : "Fade duration (seconds)" : "2"
    holdtime(string) : "Hold fade (seconds)" : "0"
    renderamt(integer) : "Fade alpha" : 255
    rendercolor(color255) : "Fade color (R G B)" : "0 0 0"
    messagetime(string) : "Show message delay" : "0"
    message(string) : "Message to display" : ""
    loadtime(string) : "Reload delay" : "0"
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_sethudcolor : "Set or reset player hud color" 
[
    hud_color(color255) : "HUD color (R G B)" : "0 0 0"

    action(choices) : "Action to take" : 0 =
    [
        0: "Set color"
        1: "Reset color"
    ]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_weaponstrip : "Strips player's weapons" []

@PointClass base(Targetname, Targetx) size(-16 -16 0, 16 16 72) color(255 0 255) = scripted_sentence : "Scripted sentence"
[
    spawnflags(flags) = 
    [
        1: "Fire Once"   : 1
        2: "Followers only"  : 0
        4: "Interrupt speech"  : 1
        8: "Concurrent"  : 0
    ]
    sentence(string) : "Sentence name" : ""
    entity(string) : "Speaker entity"
    duration(string) : "Sentence time" : "3"
    radius(integer) : "Search radius" : 512
    refire(string) : "Delay before refire" : "3"
    listener(string) : "Listener"
    volume(string) : "Volume 0-10" : "10"
    attenuation(choices) : "Sound radius" : 0 =
    [
        0: "Small radius"
        1: "Medium radius"
        2: "Large  radius"
        3: "Play everywhere"
    ]
]

@PointClass base(Targetname, Targetx, Angles) flags(Angle) size(-16 -16 0, 16 16 72) color(255 0 255) = scripted_sequence : "Scripted sequence"
[
    m_iszEntity(string) : "Target monster"
    m_iszPlay(string) : "Action animation" : ""
    m_iszIdle(string) : "Idle animation" : ""
    m_flRadius(integer) : "Search radius" : 512
    m_flRepeat(integer) : "Repeat rate ms" : 0
    m_fMoveTo(choices) : "Move to position" : 0 =
    [
        0: "No"
        1: "Walk"
        2: "Run"
        4: "Instantaneous"
        5: "No - turn to face"
    ]
    spawnflags(flags) = 
    [
        4: "Repeatable"  : 0
        8: "Leave corpse"  : 0
        32: "No interruptions"  : 0
        64: "Override AI" : 0
        128: "No script movement" : 0
        256: "No reset entity" : 0
    ]
]

@PointClass iconsprite("sprites/speaker.spr") base(Targetname) = speaker : "Announcement speaker"
[
    preset(choices) :"Announcement presets" : 0 =
    [
        0: "None"
        1: "C1A0 announcer"
        2: "C1A1 announcer"
        3: "C1A2 announcer"
        4: "C1A3 announcer"
        5: "C1A4 announcer"  
        6: "C2A1 announcer"
        7: "C2A2 announcer"
        // 8: "C2A3 announcer"
        9: "C2A4 announcer"
        // 10: "C2A5 announcer"
        11: "C3A1 announcer"
        12: "C3A2 announcer"
    ]
    message(string) : "Sentence group name"
    health(integer) : "Volume (10 = loudest)" : 5
    spawnflags(flags) =
    [
        1: "Start silent" : 0
    ]
]

@PointClass base(Targetname) = target_cdaudio : "CD audio target"
[
    health(choices) : "Track #" : -1 =
    [
        -1: "Stop"
        1: "Track 1"
        2: "Track 2"
        3: "Track 3"
        4: "Track 4"
        5: "Track 5"
        6: "Track 6"
        7: "Track 7"
        8: "Track 8"
        9: "Track 9"
        10: "Track 10"
        11: "Track 11"
        12: "Track 12"
        13: "Track 13"
        14: "Track 14"
        15: "Track 15"
        16: "Track 16"
        17: "Track 17"
        18: "Track 18"
        19: "Track 19"
        20: "Track 20"
        21: "Track 21"
        22: "Track 22"
        23: "Track 23"
        24: "Track 24"
        25: "Track 25"
        26: "Track 26"
        27: "Track 27"
        28: "Track 28"
        29: "Track 29"
        30: "Track 30"
    ]
    radius(string) : "Player radius"
]

//
// Triggers
//

@PointClass base(Targetx) iconsprite("sprites/trigger_auto.spr") = trigger_auto : "Triggers when the map starts"
[
    spawnflags(flags) =
    [
        1: "Remove on fire" : 1
    ]
    globalstate(string) : "Global state to read"
    triggerstate(choices) : "Trigger state" : 0 = 
    [
        0: "Off"
        1: "On"
        2: "Toggle"
    ]
]

@SolidClass base(Targetname) = trigger_autosave : "Triggers an autosave"
[
    master(string) : "Master" 
]

@PointClass base(Targetx, Targetname) iconsprite("sprites/trigger_camera.spr") = trigger_camera : "Trigger camera" 
[
    wait(integer) : "Hold time" : 10
    moveto(string) : "Path corner"
    spawnflags(flags) =
    [
        1: "Start at player" : 1
        2: "Follow player" : 1
        4: "Freeze player" : 0
    ]
    speed(string) : "Initial speed" : "0"
    acceleration(string) : "Acceleration units/sec^2" : "500"
    deceleration(string) : "Stop Deceleration units/sec^2" : "500"
]

@SolidClass base(Targetname) = trigger_cdaudio : "Trigger CD audio"
[
    health(choices) : "Track #" : -1 =
    [
        -1: "Stop"
        1: "Track 1"
        2: "Track 2"
        3: "Track 3"
        4: "Track 4"
        5: "Track 5"
        6: "Track 6"
        7: "Track 7"
        8: "Track 8"
        9: "Track 9"
        10: "Track 10"
        11: "Track 11"
        12: "Track 12"
        13: "Track 13"
        14: "Track 14"
        15: "Track 15"
        16: "Track 16"
        17: "Track 17"
        18: "Track 18"
        19: "Track 19"
        20: "Track 20"
        21: "Track 21"
        22: "Track 22"
        23: "Track 23"
        24: "Track 24"
        25: "Track 25"
        26: "Track 26"
        27: "Track 27"
        28: "Track 28"
        29: "Track 29"
        30: "Track 30"
    ]
]

@SolidClass = trigger_changelevel : "Trigger that changes the level"
[
    targetname(string) : "Name"
    map(string) : "New map name"
    landmark(string) : "Landmark name"
    changetarget(target_destination) : "Change target"
    changedelay(string) : "Delay before change target" : "0"
    spawnflags(flags) =
    [
        1: "No intermission" : 0
        2: "Use only" : 0
    ]
]

@PointClass base(Targetx, Targetname) iconsprite("sprites/trigger_changetarget.spr") = trigger_changetarget : "Trigger change target"
[
    m_iszNewTarget(string) : "New target"
]

@SolidClass base(Trigger, Targetname) = trigger_counter : "Trigger counter" 
[
    spawnflags(flags) = 
    [ 
        1: "No message" : 0 
    ]
    master(string) : "Master" 
    count(integer) : "Count before activation" : 2
]

@SolidClass base(Targetname) = trigger_endsection : "Endsection trigger"
[
    section(string) : "Section"
    spawnflags(flags) =
    [
        1: "Use only" : 0
    ]
]

@SolidClass base(Trigger) = trigger_gravity : "Trigger gravity"
[
    gravity(integer) : "Gravity (0-1)" : 1
]

@SolidClass base(Targetname,Target) = trigger_hurt : "Trigger player hurt" 
[
    spawnflags(flags) = 
    [ 
        1: "Target Once" : 0 
        2: "Start Off" : 0
        8: "No clients" : 0
        16: "Trigger clients only" : 0
        32: "Touch clients only" : 0
    ]
    master(string) : "Master" 
    dmg(integer) : "Damage" : 10
    delay(string) : "Delay before trigger" : "0"
    damagetype(choices) : "Damage Type" : 0 =
    [
        0: "GENERIC"
        1: "CRUSH"
        2: "BULLET"
        4: "SLASH"
        8: "BURN"
        16: "FREEZE"
        32: "FALL"
        64: "BLAST"
        128: "CLUB"
        256: "SHOCK"
        512: "SONIC"
        1024: "ENERGYBEAM"
        16384: "DROWN"
        32768: "PARALYSE"
        65536: "NERVEGAS"
        131072: "POISON"
        262144: "RADIATION"
        524288: "DROWNRECOVER"
        1048576: "CHEMICAL"
        2097152: "SLOWBURN"
        4194304: "SLOWFREEZE"
    ]
]

@SolidClass base(Angles) = trigger_monsterjump : "Trigger monster jump" 
[
    master(string) : "Master" 
    speed(integer) : "Jump speed" : 40
    height(integer) : "Jump height" : 128
]

@SolidClass base(Trigger) = trigger_multiple : "Trigger that resets and can trigger again" 
[
    wait(integer): "Delay before reset" : 10
]

@SolidClass base(Trigger) = trigger_once : "One-time trigger" []

@SolidClass base(Trigger, Angles) = trigger_push : "Trigger player push"
[
    spawnflags(flags) = 
    [ 
        1: "Once only" : 0 
        2: "Start Off" : 0
    ]
    speed(integer) : "Speed of push" : 40
]

@PointClass base(Targetx, Targetname) iconsprite("sprites/trigger_relay.spr") = trigger_relay : "Trigger relay"
[
    spawnflags(flags) =
    [
        1: "Remove On fire" : 0
    ]
    triggerstate(choices) : "Trigger State" : 0 = 
    [
        0: "Off"
        1: "On"
        2: "Toggle"
    ]
]

@SolidClass base(Trigger) = trigger_teleport : "Trigger teleport"
[
  telesound(string) : "Teleport sound"
]


@SolidClass base(Targetname) = trigger_transition : "Transition area volume" []

//
// weapons
//

@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_crowbar.mdl") = weapon_crowbar : "Crowbar" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_9mmhandgun.mdl") = weapon_9mmhandgun : "9mm handgun" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_357.mdl") = weapon_357 : "357 handgun" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_9mmar.mdl") = weapon_9mmAR : "9mm assault rifle" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_shotgun.mdl") = weapon_shotgun : "Shotgun" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_rpg.mdl") = weapon_rpg : "RPG" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_gauss.mdl") = weapon_gauss : "Gauss gun" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_crossbow.mdl") = weapon_crossbow : "Crossbow" 
[
    sequence(choices) : "Placement" : 0 =
    [
        0: "Normal (flat)"
        1: "Realistic (tilted)"
    ]
]
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_egon.mdl") = weapon_egon : "Egon gun" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/p_tripmine.mdl") size(-16 -16 -5, 16 16 27) = weapon_tripmine : "Tripmine ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_satchel.mdl") = weapon_satchel : "Satchel Charge ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_grenade.mdl") = weapon_handgrenade : "Handgrenade ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_squeak.mdl") = weapon_snark : "Squeak grenade" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_hgun.mdl") = weapon_hornetgun : "Hornet gun" []
@PointClass size(-16 -16 0, 16 16 64) color(0 128 0) studio("models/w_chainammo.mdl") =  weaponbox : "Weapon/ammo container" []

@PointClass base(Weapon, Targetx) = world_items : "World items" 
[
    type(choices) :"types" : 1 =
    [
        44: "Battery"
        42: "Antidote"
        43: "Security Card"
        45: "Suit"
    ]
]

//
// Xen
//

@PointClass base(Target, Targetname, RenderFields, Angles) flags(Angle) studio("models/light.mdl") = xen_plantlight : "Xen plant light" []
@PointClass base(Targetname, RenderFields, Angles) flags(Angle) studio("models/hair.mdl") = xen_hair : "Xen hair" 
[
    spawnflags(flags) = 
    [
        1: "Sync movement" : 0
    ]
]

@PointClass base(Targetname, RenderFields, Angles) flags(Angle) studio("models/tree.mdl") = xen_tree : "Xen tree" []
@PointClass base(Targetname, RenderFields, Angles) flags(Angle) studio("models/fungus(small).mdl") = xen_spore_small : "Xen spore (small)" []
@PointClass base(Targetname, RenderFields, Angles) flags(Angle) studio("models/fungus.mdl") = xen_spore_medium : "Xen spore (medium)" []
@PointClass base(Targetname, RenderFields, Angles) flags(Angle) studio("models/fungus(large).mdl") = xen_spore_large : "Xen spore (large)" []

//////////////////////////////////////////////////////////////////////////////
// Opposing Force entities
//////////////////////////////////////////////////////////////////////////////

//
// Ammo
//

@PointClass base(Weapon, Targetx, RenderFields) studio("models/W_saw_clip.mdl") = ammo_556 : "M249 ammo" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_m40a1clip.mdl") = ammo_762 : "Sniper ammo" []

// Spore ammo orientation refers to the direction that the base of the plant faces
@PointClass base(Weapon, Targetx, RenderFields) studio("models/spore_ammo.mdl") = ammo_spore : "Spore" []

//
// ENV ENTITIES
//
@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_blowercannon : "Blower cannon"
[
    delay(string) : "Delay" : "0"
    zoffset(integer) : "Z offset" : 0
    target(string) : "Target" : ""
    weaptype(choices) : "Weapon type" : 1 =
    [
        1: "Spore (rocket)"
        2: "Spore (grenade)"
        3: "Shock beam"
        4: "Displacer ball"
    ]
    firetype(choices) : "Fire type" : 1 =
    [
        1: "Toggle on/off"
        2: "Fire when triggered"
    ]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_electrified_wire : "Electrified wire"
[
    segments(integer) : "Segments" : 16
    sparkfrequency(integer) : "Spark frequency" : 3
    bodysparkfrequency(integer) : "Body spark frequency" : 3
    lightningfrequency(integer) : "Lightning frequency" : 3
    xforce(integer) : "X force" : 80000
    yforce(integer) : "Y force" : 80000
    zforce(integer) : "Z force" : 80000
    disable(choices) : "Disable use" : 0 =
    [
        0: "Not disabled"
        1: "Disabled"
    ]
    endingmodel(studio) : "Ending model" : "models/wire_copper16.mdl"
    bodymodel(studio) : "Body model" : "models/wire_black16.mdl"
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_rope : "Rope"
[
    segments(integer) : "Segments" : 16
    disable(choices) :"Disable use" : 0 =
    [
        0: "Not disabled"
        1: "Disabled"
    ]
    endingmodel(studio) : "Ending model" : "models/rope16.mdl"
    bodymodel(studio) : "Body model" : "models/rope16.mdl"
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) color(0 128 255)= env_spritetrain : "Sprite train"
[
    target(target_source) : "First stop target"
    model(sprite) : "Sprite name" : "sprites/glow01.spr"
    speed(integer) : "Speed (units per second)" : 64
    scale(string) : "Sprite scale"      
]

//
// FUNC ENTITIES
//

@SolidClass base(Target) = func_op4mortarcontroller : "Opposing Force mortar controller" 
[
    mortar_axis(choices) : "Axis" : 0 =
    [
        0: "Vertical"
        1: "Horizontal"
    ]
]

@BaseClass base(Targetname, Target, RenderFields, Global) = BaseTankOF
[
    spawnflags(flags) =
    [
        1: "Active" : 0
        16: "Only direct" : 0
        32: "Controllable" : 0
    ]

    // Mainly for use with 1009 team settings (game_team_master)
    master(string) : "(Team) Master" 

    yawrate(string) : "Yaw rate" : "30"
    yawrange(string) : "Yaw range" : "180"
    yawtolerance(string) : "Yaw tolerance" : "15"
    pitchrate(string) : "Pitch rate" : "0"
    pitchrange(string) : "Pitch range" : "0"
    pitchtolerance(string) : "Pitch tolerance" : "5"
    barrel(string) : "Barrel length" : "0"
    barrely(string) : "Barrel horizontal" : "0"
    barrelz(string) : "Barrel vertical" : "0"
    spritesmoke(string) : "Smoke sprite" : ""
    spriteflash(string) : "Flash sprite" : ""
    spritescale(string) : "Sprite scale" : "1"
    rotatesound(sound) : "Rotate sound" : ""
    firerate(string) : "Rate of fire" : "1"
    bullet_damage(string) : "Damage per bullet" : "0"
    persistence(string) : "Firing persistence" : "1"
    firespread(choices) : "Bullet accuracy" : 0 =
    [
        0: "Perfect shot"
        1: "Small cone"
        2: "Medium cone"
        3: "Large cone"
        4: "Extra-large cone"
    ]
    minRange(string) : "Minmum target range" : "0"
    maxRange(string) : "Maximum target range" : "0"
    _minlight(string) : "Minimum light level"
    enemytype(choices) : "Enemy type" : 1 =
    [
        0: "Player"
        1: "Ally"
        2: "Random"
    ]
]

// Don't forget func_tankcontrols_of
@SolidClass base(BaseTankOF) = func_tank_of : "Opposing Force brush gun turret" 
[
    bullet(choices) : "Bullets" : 0 = 
    [
        0: "None"
        1: "9mm"
        2: "MP5"
        3: "12mm"
    ]
]

@SolidClass = func_tankcontrols_of : "Oppsing Force tank controls"
[
    target(target_destination) : "Tank entity name"
]

// Don't forget func_tankcontrols_of
@SolidClass base(BaseTankOF) = func_tanklaser_of : "Opposing Force brush laser turret" 
[
    laserentity(target_source) : "env_laser entity"
]

// Don't forget func_tankcontrols_of
@SolidClass base(BaseTankOF) = func_tankrocket_of : "Opposing Force brush rocket turret" []

// Don't forget func_tankcontrols_of
@SolidClass base(BaseTankOF) = func_tankmortar_of : "Oppsing Force brush mortar turret" 
[
  iMagnitude(integer) : "Explosion magnitude" : 100
]

//
// INFO ENTITIES
//

// Displacer target placement represents the point where the player's feet shall be
@PointClass base(Targetname) size(-4 -4 -4, 4 4 4) color(200 100 50) = info_displacer_xen_target : "Displacer XEN target" []
@PointClass base(Targetname) size(-4 -4 -4, 4 4 4) color(200 100 50) = info_displacer_earth_target : "Displacer EARTH target" []

@PointClass base(Targetname, Target) = info_pitworm_steam_lock : "Pitworm steam lock" []

//
// ITEM ENTITIES
//

@PointClass base(Weapon, Targetx) = item_generic : "Generic scenery item"
[
    model(studio) : "Model" : "models/egg.mdl"
    sequencename(string) : "Sequence name" : "idle"
    skin(integer) : "Skin" : 0
    body(integer) : "Body" : 0
    
    spawnflags(flags) =
    [
        1: "Drop to floor" : 0
    ]
]

@PointClass base(Weapon, Targetx) size(-16 -16 0, 16 16 36) = item_nuclearbomb : "Nuclear bomb"
[
    initialstate(integer) : "Initial state" : 0
    wait(integer) : "Wait" : 1
]

//
// MONSTERS
//

@PointClass base(Monster, Sequence) studio("models/baby_voltigore.mdl") = monster_alien_babyvoltigore : "Baby voltigore" 
[
    netname(string) : "Squad name"
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]
]

@PointClass base(Monster, Sequence) studio("models/voltigore.mdl") = monster_alien_voltigore : "Voltigore" 
[
    netname(string) : "Squad Name"
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]
]

@PointClass base(Monster, Sequence) studio("models/islave.mdl") = monster_alien_slave_dead : "Dead vortigaunt" 
[
    pose(choices) : "Pose" : 0 =
    [
        0: "On stomach"
    ]
]

@PointClass base(Monster, Sequence) studio("models/massn.mdl") = monster_assassin_repel : "Male assassin (repel)" []

@PointClass base(Monster, Sequence) studio("models/blkop_apache.mdl") = monster_blkop_apache : "Black ops Apache" 
[
    spawnflags(flags) = 
    [
        8: "No wreckage"  : 0
        64: "Start inactive" : 0
    ]
]

@PointClass base(Monster, Sequence) studio("models/blkop_osprey.mdl") = monster_blkop_osprey : "Black ops Osprey"
[
    spawnflags(flags) = 
    [
        64: "Start inactive" : 0
    ]
]

@PointClass base(Monster, TalkMonster, Sequence) studio("models/cleansuit_scientist.mdl") = monster_cleansuit_scientist : "Cleansuit scientist" 
[
    body(choices) : "Body" : -1 =
    [
        -1: "Random"
        0: "Glasses"
        1: "Einstein"
        2: "Luther"
        3: "Slick"
    ]
]

@PointClass base(Targetname,Appearflags,RenderFields, Sequence) studio("models/cleansuit_scientist.mdl") = monster_cleansuit_scientist_dead : "Dead cleansuit scientist" 
[
    body(choices) : "Body" : -1 =
    [
        -1: "Random"
        0: "Glasses"
        1: "Einstein"
        2: "Luther"
        3: "Slick"
    ]

    pose(choices) : "Pose" : 0 =
    [
        0: "On back"
        1: "On stomach"
        2: "Sitting"
        3: "Hanging"
        4: "Table 1"
        5: "Table 2"
        6: "Table 3"
        7: "Hi Mike!"
        8: "Dead against wall"
    ]
]

@PointClass base(Monster, Sequence) studio("models/cleansuit_scientist.mdl") = monster_sitting_cleansuit_scientist : "Sitting cleansuit scientist" 
[
    body(choices) : "Body" : -1 =
    [
        -1: "Random"
        0: "Glasses"
        1: "Einstein"
        2: "Luther"
        3: "Slick"
    ]
]

@PointClass base(Monster,TalkMonster, Sequence) studio("models/drill.mdl") = monster_drillsergeant : "Drill sergeant" []

@PointClass base(Monster, Sequence) studio("models/geneworm.mdl") = monster_geneworm : "Gene Worm" []
@PointClass base(Monster, Sequence) studio("models/gonome.mdl") = monster_gonome : "Gonome" []
@PointClass base(Targetname,Appearflags,RenderFields, Sequence) studio("models/gonome.mdl") = monster_gonome_dead : "Dead Gonome" 
[
    pose(choices) : "Pose" : 0 =
    [
        0: "On Stomach"
        1: "On Back"
        2: "On Side"
    ]
]

@PointClass base(Monster, Sequence) studio("models/houndeye_dead.mdl") = monster_houndeye_dead : "Dead houndeye" 
[
    pose(choices) : "Pose" : 0 =
    [
        0: "Just plain dead"
    ]
]

@PointClass base(Monster, Sequence, TalkMonster) studio("models/hgrunt_opfor.mdl") = monster_grunt_ally_repel : "Human grunt ally (repel)"
[
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]
    netname(string) : "Squad name"
    weapons(choices) : "Weapons" : 3 =
    [
        1: "9mmAR"
        3: "9mmAR + HG"
        5: "9mmAR + GL"
        8: "Shotgun"
        10: "Shotgun + HG"
        16: "Saw"
    ]
    head(choices) : "Heads" : -1 =
    [
        -1: "Default"
        0: "Gas mask"
        1: "Beret"
        2: "Ops mask"
        3: "Bandana white"
        4: "Bandana black"
        5: "MP"
        6: "Major"
        7: "Beret (black)"
    ]
]

@PointClass base(Monster, Sequence, TalkMonster) studio("models/hgrunt_opfor.mdl") = monster_human_grunt_ally : "Human grunt ally (camo)" 
[
    netname(string) : "Squad name"
    
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]

    weapons(choices) : "Weapons" : 3 =
    [
        0: "None"
        1: "9mmAR"
        3: "9mmAR + HG"
        5: "9mmAR + GL"
        8: "Shotgun"
        10: "Shotgun + HG"
        16: "Saw"
    ]

    head(choices) : "Heads" : -1 =
    [
        -1: "Default"
        0: "Gas mask"
        1: "Beret"
        2: "Ops mask"
        3: "Bandana white"
        4: "Bandana black"
        5: "MP"
        6: "Major"
        7: "Beret (black)"
    ]
]


@PointClass base(Targetname,Appearflags,RenderFields, Sequence) studio("models/hgrunt_opfor.mdl") = monster_human_grunt_ally_dead : "Dead human grunt ally" 
[
    pose(choices) : "Pose" : 0 =
    [
        0: "On stomach"
        1: "On side"
        2: "Seated"
        3: "Dead on back"
        4: "Dead on stomach"
        5: "Head crabbed"
        6: "Dead canyon"
    ]

    weapons(choices) : "Weapons" : 1 =
    [
        0: "None"
        1: "9mmAR"
        8: "Shotgun"
        16: "Saw"
    ]

    head(choices) : "Heads" : 0 =
    [
        0: "Gas mask"
        1: "Beret"
        2: "Ops mask"
        3: "Bandana white"
        4: "Bandana black"
        5: "MP"
        6: "Major"
        7: "Beret (black)"
    ]
]


@PointClass base(Monster, Sequence) studio("models/hgrunt_medic.mdl") = monster_human_medic_ally : "Medic" 
[
    netname(string) : "Squad name"
    
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]

    head(choices) : "Heads" : -1 =
    [
        -1: "Random"
        0: "White"
        1: "Black"
    ]

    weapons(choices) : "Weapons" : 2 =
    [
        0: "None"
        1: "Desert Eagle"
        2: "9mm handgun"
        4: "Hypodermic needle"
    ]
]


@PointClass base(Monster, Sequence) studio("models/hgrunt_torch.mdl") = monster_human_torch_ally : "Torch boi" 
[
    netname(string) : "Squad name"
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]
    weapons(choices) : "Weapons" : 1 =
    [
        1: "Desert Eagle"
        2: "Blow torch"
        5: "Desert Eagle + HG"
        6: "Blow torch + HG"
    ]
]


@PointClass base(Monster, Sequence) studio("models/massn.mdl") = monster_male_assassin : "Male assassin"
[
    netname(string) : "Squad name"
    
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]

    head(choices) : "Heads" : 0 =
    [
        -1: "Random"
        0: "Ski mask white"
        1: "Ski mask nlack"
        2: "Night goggles"
    ]

    weapons(choices) : "Weapons" : 3 =
    [
        0: "None"
        1: "9mmAR"
        3: "9mmAR + HG"
        5: "9mmAR + GL"
        8: "Sniper rifle"
    ]
    standgroundrange(string) : "Stand ground range" : "0.0"
]

@PointClass base(Monster, RenderFields, Sequence) studio("models/loader.mdl") = monster_op4loader : "Loader machine" 
[
    spawnflags(flags) = 
    [
        4: "Not solid" : 0
    ]
]


@PointClass base(Monster,TalkMonster, Sequence) studio("models/otis.mdl") = monster_otis : "Otis"
[
    bodystate(choices) : "bodystate" : -1 =
    [
        -1: "Random"
        0: "Gun holstered"
        1: "Gun drawn"
        3: "Donut"
    ]
    head(choices) : "head" : -1 =
    [
        -1: "Random"
        0: "Bald head"
        1: "Head with hair"
    ]
    suspicious(choices) : "Suspicious" : 0 =
    [
        0: "No"
        1: "Yes"
    ]
]

// Otis ate too many donuts
@PointClass base(Targetname,Appearflags, Sequence) studio("models/otis.mdl") = monster_otis_dead : "Dead Otis" 
[
    pose(choices) : "Pose" : 0 =
    [
        0: "On back"
        1: "On side"
        2: "On stomach"
        3: "Stuffed in Vent"
        4: "Dead Sitting"
    ]
]

@PointClass base(Monster, Sequence) studio("models/pit_drone.mdl") = monster_pitdrone : "Pit drone"
[
    initammo(string) : "Initial ammo" : "6"
]

@PointClass base(Monster, Sequence) studio("models/pit_worm_up.mdl") = monster_pitworm : "Pit worm" []
@PointClass base(Monster, Sequence) studio("models/pit_worm_up.mdl") = monster_pitworm_up : "Pit worm upright" []

@PointClass base(Monster, Sequence) studio("models/w_shock_rifle.mdl") = monster_shockroach : "Shock roach" []


@PointClass base(Monster, Sequence) studio("models/zombie_barney.mdl") = monster_zombie_barney : "Barney zombie" []
@PointClass base(Monster, Sequence) studio("models/zombie_soldier.mdl") = monster_zombie_soldier : "Soldier zombie" []
@PointClass base(Monster, Sequence) studio("models/zombie_soldier.mdl") = monster_zombie_soldier_dead : "Dead soldier zombie"
[
    pose(choices) : "Pose" : 0 =
    [
        0: "On back"
        1: "On stomach"
    ]
]

@PointClass base(Monster,TalkMonster, Sequence) studio("models/recruit.mdl") = monster_recruit : "Recruit" []

@PointClass base(Targetname,Appearflags,RenderFields, Sequence) size(-16 -16 0, 16 16 72) = monster_skeleton_dead : "Dead skeleton" 
[
    pose(choices) : "Pose" : 0 =
    [
        0: "On back"
        1: "Seated"
        2: "Against wall"
        3: "On stomach"
    ]
]

@PointClass base(Monster, Sequence) studio("models/strooper.mdl") = monster_shocktrooper : "Shock trooper" 
[
    netname(string) : "Squad name"
    spawnflags(flags) =
    [
        32: "Squad leader" : 0
    ]
    weapons(choices) : "Weapons" : 3 =
    [
        1: "9mmAR"
        3: "9mmAR + HG"
        5: "9mmAR + GL"
        8: "Shotgun"
        10: "Shotgun + HG"
    ]
]

@PointClass base(Targetname) = op4mortar : "Opposing Force mortar" 
[
    spawnflags(flags) =
    [
        1: "Active" : 0
        16: "Line of sight" : 1
        32: "Can control" : 1
    ]
    mortar_velocity(integer) : "Velocity" : 800
    h_min(integer) : "Horizontal min" : -90
    h_max(integer) : "Horizontal max" : 90
    mindist(integer) : "Min target dist" : 256
    maxdist(integer) : "Max target dist" : 2048
    enemytype(choices) : "Enemy type" : 0 =
    [
        0: "Player"
        1: "Ally"
        2: "Random"
    ]
    firedelay(integer) : "Fire rate" : 5
]

@PointClass base(gibshooterbase) = pitworm_gibshooter : "Pitworm gib shooter" []

//
// TRIGGERS
//

@SolidClass base(Targetname,Target) = trigger_geneworm_hit : "Trigger GeneWorm hit" 
[
    spawnflags(flags) = 
    [ 
        1: "Target once" : 0 
        2: "Start off" : 0
        8: "No clients" : 0
        16: "FireClientOnly" : 0
        32: "TouchClientOnly" : 0
    ]
    
    master(string) : "Master" 
    delay(string) : "Delay before trigger" : "0"
]

@PointClass base(Targetx, Targetname) = trigger_playerfreeze : "Trigger player freeze" []
@SolidClass base(Trigger) = trigger_xen_return : "Return to Earth (self-teleport)" []

//
//WEAPONS
//

@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_displacer.mdl") = weapon_displacer : "Displacer" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_desert_eagle.mdl") = weapon_eagle : "Desert Eagle" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_bgrap.mdl") = weapon_grapple : "Barnacle grapple" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_knife.mdl") = weapon_knife : "Knife" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_saw.mdl") = weapon_m249 : "M249 SAW" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_penguinnest.mdl") = weapon_penguin : "Killer penguin" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_pipe_wrench.mdl") = weapon_pipewrench : "Pipe wrench" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_shock.mdl") = weapon_shockrifle : "Shock roach" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_m40a1.mdl") = weapon_sniperrifle : "Sniper rifle" []
@PointClass base(Weapon, Targetx, RenderFields) studio("models/w_spore_launcher.mdl") = weapon_sporelauncher : "Spore launcher" []

//////////////////////////////////////////////////////////////////////////////
// Opposing Force CTF Entities				      //
//////////////////////////////////////////////////////////////////////////////

//
// BaseClasses
//

@BaseClass = CTFAttributes
[
    goal_no(choices) : "Team" : 1 =
    [
        1: "Black Mesa"
        2: "Opposing Force"
    ]
    goal_min(string) : "Min bounds" : "-16 -16 0"
    goal_max(string) : "Max bounds" : "16 16 72"
]

@BaseClass = CTFItem
[
    spawnflags(flags) = 
    [ 
        4: "Random spawn" : 1 
        8: "Ignore spawn team setting" : 0
    ]
    team_no(choices) : "Team" : 0 =
    [
        0: "Random"
        1: "Black Mesa"
        2: "Opposing Force"
    ]
]

//
// Items
//

@PointClass base(CTFAttributes) size(-16 -16 0, 16 16 72) = item_ctfflag : "CTF flag"
[
    skin(choices) : "Skin" : 1 =
    [
        1: "Black Mesa"
        2: "Opposing Force"
    ]
    model(studio) : "Model" : "models/flag.mdl"
]
@PointClass base(CTFAttributes) size(-16 -16 0, 16 16 72) = item_ctfbase : "CTF goal"
[
    skin(choices) : "Skin" : 0 =
    [
        0: "Default"
    ]
    model(studio) : "Model" : "models/civ_stand.mdl"
]
@PointClass base(PlayerClass) = info_ctfspawn : "Player CTF start" 
[
    team_no(choices) : "Team" : 0 =
    [
        0: "Random"
        1: "Black Mesa"
        2: "Opposing Force"
    ]
]

@PointClass = info_ctfdetect : "CTF detect"
[
    flagreturntime(string) : "Flag return time" : "30.0"
    basedefenddist(string) : "Base defend distance" : "192.0"
    defendcarriertime(string) : "Defend carrier time" : "10.0"
    captureassisttime(string) : "Capture assist time" : "10.0"
    poweruprespawntime(string) : "Powerup respawn time" : "30.0"
    score_icon_namebm(string) : "Non-Flag Black Mesa icon" : "item_ctfscorebm"
    score_icon_nameof(string) : "Non-Flag Opposing Force icon" : "item_ctfscoreof"
    map_score_max(string) : "Maximum map team score" : "0"
]

@PointClass base(CTFItem) studio("models/w_jumppack.mdl") = item_ctflongjump : "Longjump module for CTF" []
@PointClass base(CTFItem) studio("models/w_porthev.mdl") = item_ctfportablehev : "Portable HEV charger for CTF" []
@PointClass base(CTFItem) studio("models/w_health.mdl") = item_ctfregeneration : "Health regeneration for CTF" []
@PointClass base(CTFItem) studio("models/w_accelerator.mdl") = item_ctfaccelerator : "Double weapon Damage for CTF" []
@PointClass base(CTFItem) studio("models/w_backpack.mdl") = item_ctfbackpack : "Backpack powerup for CTF" []
@PointClass size(-16 -16 0, 16 16 36) = info_ctfspawn_powerup : "CTF powerup spawn spot"
[
    team_no(choices) : "Team" : 0 =
    [
        0: "Random"
        1: "Black Mesa"
        2: "Opposing Force"
    ]
]

@SolidClass base(Target, Targetname) = trigger_ctfgeneric : "Trigger CTF generic"
[
    team_no(choices) : "Team" : 0 =
    [
        0: "Both teams"
        1: "Black Mesa only"
        2: "Opposing Force only"
    ]
    trigger_delay(string) : "Re-activate delay" : "5"
    score(string) : "Player score" : "0"
    team_score(string) : "Team score" : "0"
    triggerstate(choices) : "Trigger state" : 0 = 
    [
        0: "Off"
        1: "On"
        2: "Toggle"
    ]
]

// ===============================================================================================
// ===============================================================================================
//
// ADM entities
//
// ===============================================================================================
// ===============================================================================================

// ===============================================================================================
// filter_ entities
// ===============================================================================================

@PointClass base(Targetname, Target) = filter_date_hms : "Relays the trigger according to system hour-minute-second"
[
    hour(integer) : "Hour (-1 = any)"
    minute(integer) : "Minute (-1 = any)"
    second(integer) : "Second (-1 = any)"
]

@PointClass base(Targetname, Target) = filter_date_ymd : "Relays the trigger according to system year-month-date"
[
    year(integer) : "Year (-1 = any)"
    month(integer) : "Month (-1 = any)"
    day(integer) : "Day (-1 = any)"
]

@PointClass base(Targetname, Target) = filter_difficulty : "Relays the trigger according to the difficulty"
[
    skill(choices) : "Skill" : 1 =
    [
        1: "Easy"
        2: "Medium"
        4: "Hard"
        3: "Easy + medium"
        7: "Easy + medium + hard"
        5: "Easy + hard"
        6: "Medium + hard"
    ]
]

// ===============================================================================================
// trigger_ entities
// ===============================================================================================

@PointClass base(Targetname, Target) = trigger_timer : "Triggers its target every X seconds"
[
    baseDelay(string) : "Delay" : : "Base delay between ticks"
    randomDelay(string) : "Random delay" : : "Random delay that is added to the base delay (totalDelay = baseDelay + rand(-randomDelay,+randomDelay))" 
]

// ===============================================================================================
// util_ entities
// ===============================================================================================

@PointClass base(Targetname) = util_movewith : "Every frame, moves an entity to another entity's origin"
[
    parent(target_destination) : "Parent entity"
    child(target_destination) : "Child entity"
]

@PointClass base(Targetname) = util_print : "Prints a message into the console"
[
    netname(string) : "Message"
]

@PointClass base(Targetname) = util_servercommand : "Executes a server command when triggered"
[
    command(string) : "Command to execute"
]
